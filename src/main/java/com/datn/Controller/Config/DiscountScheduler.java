package com.datn.Controller.Config;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.datn.dao.ProductDAO;
import com.datn.model.Product;

@Service
public class DiscountScheduler {
    @Autowired
    ProductDAO productDAO;

    // Ch·∫°y m·ªói ng√†y l√∫c 00:01 gi·ªù s√°ng ƒë·ªÉ reset gi·∫£m gi√° h·∫øt h·∫°n
    @Scheduled(cron = "0 1 0 * * *")
    @Transactional
    public void removeExpiredDiscounts() {
        LocalDate today = LocalDate.now();
        
        System.out.println("=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA V√Ä RESET GI·∫¢M GI√Å H·∫æT H·∫†N ===");
        System.out.println("Ng√†y hi·ªán t·∫°i: " + today);
        
        // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n (bao g·ªìm c·∫£ ng√†y h√¥m nay)
        List<Product> expiredDiscountProducts = productDAO.findByDiscountEndBefore(today.plusDays(1));
        
        System.out.println("T√¨m th·∫•y " + expiredDiscountProducts.size() + " s·∫£n ph·∫©m c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n gi·∫£m gi√°");
        
        int updatedCount = 0;
        
        for (Product product : expiredDiscountProducts) {
            // Ki·ªÉm tra n·∫øu gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n (ng√†y h√¥m nay sau ng√†y k·∫øt th√∫c ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c)
            if (product.getDiscountEnd() != null && 
                (today.isAfter(product.getDiscountEnd()) || today.isEqual(product.getDiscountEnd()))) {
                
                System.out.println("üîÑ Reset gi·∫£m gi√° cho s·∫£n ph·∫©m ID: " + product.getId() + 
                                 " - " + product.getName() + 
                                 " (Gi·∫£m gi√°: " + product.getDiscountPercent() + "%, " +
                                 "H·∫øt h·∫°n: " + product.getDiscountEnd() + ")");
                
                // Reset t·∫•t c·∫£ th√¥ng tin gi·∫£m gi√°
                product.setDiscountPercent(null);
                product.setDiscountStart(null);
                product.setDiscountEnd(null);
                updatedCount++;
            }
        }
        
        if (updatedCount > 0) {
            productDAO.saveAll(expiredDiscountProducts);
            System.out.println("‚úÖ DiscountScheduler: ƒê√£ reset gi·∫£m gi√° cho " + updatedCount + 
                             " s·∫£n ph·∫©m l√∫c " + java.time.LocalDateTime.now());
        } else {
            System.out.println("‚ÑπÔ∏è DiscountScheduler: Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn reset gi·∫£m gi√° l√∫c " + 
                             java.time.LocalDateTime.now());
        }
        
        System.out.println("=== K·∫æT TH√öC KI·ªÇM TRA RESET GI·∫¢M GI√Å ===\n");
    }
    
    // Ch·∫°y m·ªói gi·ªù ƒë·ªÉ ki·ªÉm tra v√† reset gi·∫£m gi√° h·∫øt h·∫°n (ƒë·ªÉ ƒë·∫£m b·∫£o real-time h∆°n)
    @Scheduled(cron = "0 0 * * * *")
    @Transactional
    public void hourlyDiscountCheck() {
        LocalDate today = LocalDate.now();
        
        // Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≥ ng√†y k·∫øt th√∫c gi·∫£m gi√° l√† h√¥m nay
        List<Product> todayExpiredProducts = productDAO.findByDiscountEndBefore(today.plusDays(1))
            .stream()
            .filter(p -> p.getDiscountEnd() != null && 
                        (today.isEqual(p.getDiscountEnd()) || today.isAfter(p.getDiscountEnd())))
            .toList();
        
        if (!todayExpiredProducts.isEmpty()) {
            int updatedCount = 0;
            
            for (Product product : todayExpiredProducts) {
                if (product.getDiscountPercent() != null) { // Ch·ªâ reset n·∫øu v·∫´n c√≤n gi·∫£m gi√°
                    System.out.println("‚è∞ Hourly check - Reset gi·∫£m gi√° cho s·∫£n ph·∫©m: " + product.getName() + 
                                     " (ID: " + product.getId() + ")");
                    
                    product.setDiscountPercent(null);
                    product.setDiscountStart(null);
                    product.setDiscountEnd(null);
                    updatedCount++;
                }
            }
            
            if (updatedCount > 0) {
                productDAO.saveAll(todayExpiredProducts);
                System.out.println("‚úÖ Hourly check: Reset " + updatedCount + " s·∫£n ph·∫©m h·∫øt h·∫°n gi·∫£m gi√°");
            }
        }
    }
    
    // Ch·∫°y m·ªói ng√†y l√∫c 00:02 ƒë·ªÉ k√≠ch ho·∫°t gi·∫£m gi√° m·ªõi b·∫Øt ƒë·∫ßu
    @Scheduled(cron = "0 2 0 * * *")
    @Transactional
    public void activateNewDiscounts() {
        LocalDate today = LocalDate.now();
        
        System.out.println("=== KI·ªÇM TRA K√çCH HO·∫†T GI·∫¢M GI√Å M·ªöI ===");
        System.out.println("Ng√†y hi·ªán t·∫°i: " + today);
        
        // T√¨m t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ ng√†y b·∫Øt ƒë·∫ßu gi·∫£m gi√° l√† h√¥m nay
        List<Product> allProducts = productDAO.findAll();
        int activatedCount = 0;
        
        for (Product product : allProducts) {
            if (product.getDiscountStart() != null && 
                product.getDiscountPercent() != null && 
                product.getDiscountPercent() > 0 &&
                today.isEqual(product.getDiscountStart())) {
                
                System.out.println("üéØ K√≠ch ho·∫°t gi·∫£m gi√° cho s·∫£n ph·∫©m: " + product.getName() + 
                                 " (ID: " + product.getId() + ", Gi·∫£m: " + product.getDiscountPercent() + "%)");
                activatedCount++;
            }
        }
        
        if (activatedCount > 0) {
            System.out.println("‚úÖ ƒê√£ k√≠ch ho·∫°t gi·∫£m gi√° cho " + activatedCount + " s·∫£n ph·∫©m");
        } else {
            System.out.println("‚ÑπÔ∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o b·∫Øt ƒë·∫ßu gi·∫£m gi√° h√¥m nay");
        }
        
        System.out.println("=== K·∫æT TH√öC KI·ªÇM TRA K√çCH HO·∫†T GI·∫¢M GI√Å ===\n");
    }
}
