package com.datn.Controller.admin;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.validation.Valid;

import com.datn.model.Shipper;
import com.datn.model.User;
import com.datn.Service.ShipperService;
import com.datn.Service.UserService;

@Controller
@RequestMapping("/User")
public class UserCRUDController {

    @Autowired
    private UserService UserService;

    @Autowired
    private ShipperService shipperService;
    
    // L·∫•y to√†n b·ªô danh s√°ch user v√† g√°n v√†o thu·ªôc t√≠nh "Users"
    @ModelAttribute("Users")
    public List<User> getAllUsers() {
        return UserService.findAll();
    }

    // Trang hi·ªÉn th·ªã form th√™m user
    @RequestMapping("/index")
    public String index(Model model) {
        model.addAttribute("User", new User());
        model.addAttribute("isEdit", false);
        model.addAttribute("view", "admin/UserCRUD");
        return "admin/layout";
    }

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng submit form t·∫°o user m·ªõi
    @PostMapping("/create")
    public String create(Model model, @Valid @ModelAttribute("User") User User,
            Errors errors, RedirectAttributes redirectAttributes) {
        
        // N·∫øu c√≥ l·ªói validation th√¨ quay l·∫°i form
        if (errors.hasErrors()) {
            model.addAttribute("Users", UserService.findAll());
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i hay ch∆∞a
        if (UserService.findByEmail(User.getEmail()) != null) {
            model.addAttribute("error", "Email n√†y ƒë√£ t·ªìn t·∫°i!");
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";            
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
        User exitSDT = UserService.findBySdt(User.getSdt());
        if (exitSDT != null && exitSDT.getId() != User.getId()) {
            model.addAttribute("error", "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ t·ªìn t·∫°i!");
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }

        // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
        if (User.getPassword() == null || User.getPassword().length() < 4 ) {
            model.addAttribute("errorPass", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±!");
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";   
        }

        try {
            // T·∫°o user
            UserService.create(User);

            // N·∫øu user c√≥ role l√† shipper (2) ‚Üí t·∫°o m·ªõi shipper
            if (User.getRole() == 2) {
                Shipper shipper = new Shipper();
                shipper.setUser(User);
                shipper.setTotalsNumberOrder(0);
                shipper.setVehicle("");
                shipper.setCccd("");
                shipper.setAddress("");
                shipper.setHistoryOrder("");
                shipperService.save(shipper);
            }

            redirectAttributes.addFlashAttribute("success", "Th√™m User th√†nh c√¥ng!");
            return "redirect:/User/index";

        } catch (IllegalArgumentException e) {
            model.addAttribute("error", e.getMessage());
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }
    }

    // Truy c·∫≠p v√†o trang ch·ªânh s·ª≠a user
    @GetMapping("/edit/{id}")
    public String edit(Model model, @PathVariable("id") int id) {
        User User = UserService.findByID(id);
        model.addAttribute("User", User);
        model.addAttribute("isEdit", true);
        model.addAttribute("view", "admin/UserCRUD");
        return "admin/layout";
    }

    // X·ª≠ l√Ω c·∫≠p nh·∫≠t user
    @PostMapping("/update")
    public String update(Model model, @Valid @ModelAttribute("User") User User,
            Errors errors, RedirectAttributes redirectAttributes) {

        if (errors.hasErrors()) {
            model.addAttribute("isEdit", true);
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }

        User exi = UserService.findByID(User.getId());

        // N·∫øu kh√¥ng nh·∫≠p password th√¨ gi·ªØ nguy√™n password c≈©
        if (User.getPassword() == null || User.getPassword().isBlank()) {
            User.setPassword(exi.getPassword());
        }

        // Ki·ªÉm tra tr√πng s·ªë ƒëi·ªán tho·∫°i
        User exitSDT = UserService.findBySdt(User.getSdt());
        if (exitSDT != null && exitSDT.getId() != User.getId()) {
            model.addAttribute("error", "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ t·ªìn t·∫°i!");
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }

        try {
            Shipper exiShip = shipperService.findByUserId(User.getId());

            // N·∫øu user t·ª´ng l√† shipper ‚Üí ƒë·ªïi role ‚Üí ng·ª´ng ho·∫°t ƒë·ªông shipper
            if (exi.getRole() == 2 && User.getRole() != 2 && exiShip != null) {
                exiShip.setStatus(false);
                shipperService.save(exiShip);
            }

            // N·∫øu user t·ª´ng kh√¥ng l√† shipper ‚Üí chuy·ªÉn sang shipper
            if (exi.getRole() != 2 && User.getRole() == 2) {
                if (exiShip != null) {
                    exiShip.setStatus(true); // k√≠ch ho·∫°t l·∫°i shipper
                    shipperService.save(exiShip);
                } else {
                    // t·∫°o m·ªõi shipper
                    Shipper shipper = new Shipper();
                    shipper.setUser(User);
                    shipper.setTotalsNumberOrder(0);
                    shipper.setVehicle("");
                    shipper.setCccd("");
                    shipper.setAddress("");
                    shipper.setHistoryOrder("");
                    shipper.setStatus(true);
                    shipperService.save(shipper);
                }
            }

            // N·∫øu user ƒëang l√† shipper m√† b·ªã set tr·∫°ng th√°i kh√¥ng ho·∫°t ƒë·ªông
            if (User.getRole() == 2 && !User.getStatus() && exiShip != null) {
                exiShip.setStatus(false);
                shipperService.save(exiShip);
            }

            // N·∫øu user l√† shipper v√† ƒë∆∞·ª£c b·∫≠t l·∫°i
            if (User.getRole() == 2 && User.getStatus() && exiShip != null) {
                exiShip.setStatus(true);
                shipperService.save(exiShip);
            }

            UserService.update(User);
            redirectAttributes.addFlashAttribute("success", "C·∫≠p nh·∫≠t User th√†nh c√¥ng!");
            return "redirect:/User/edit/" + User.getId();

        } catch (IllegalArgumentException e) {
            model.addAttribute("error", e.getMessage());
            model.addAttribute("view", "admin/UserCRUD");
            return "admin/layout";
        }
    }

    // X·ª≠ l√Ω x√≥a user
    @RequestMapping("/delete/{id}")
    public String delete(Model model, @ModelAttribute("User") User User,
            Errors errors, @PathVariable("id") int id, RedirectAttributes redirectAttributes) {

        try {
            UserService.deleteById(id);
            redirectAttributes.addFlashAttribute("success", "ƒê√£ x√≥a User!");
            return "redirect:/User/index";

        } catch (IllegalArgumentException e) {
            redirectAttributes.addFlashAttribute("error", e.getMessage());
            return "redirect:/Category/edit/" + User.getId(); // üîÅ L∆∞u √Ω ƒë∆∞·ªùng d·∫´n n√†y c√≥ th·ªÉ l√† l·ªói
        }

    }

}
